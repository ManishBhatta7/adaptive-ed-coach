import { Button } from '@/components/ui/button';
import { FileText } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import { useEffect, useState } from 'react';
import * as jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

interface PdfReportGeneratorProps {
  studentName?: string;
  data: any;
  reportType: 'essay' | 'reading' | 'answer' | 'report-card';
}

const PdfReportGenerator = ({ studentName = 'Student', data, reportType }: PdfReportGeneratorProps) => {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [isJsPdfReady, setIsJsPdfReady] = useState(false);

  useEffect(() => {
    if (typeof jsPDF === 'object') {
      setIsJsPdfReady(true);
    }
  }, []);

  const generatePdf = async () => {
    if (!isJsPdfReady) {
      toast({
        title: 'PDF Generation Error',
        description: 'PDF generation library not loaded properly',
        variant: 'destructive'
      });
      return;
    }

    setIsGenerating(true);
    
    try {
      const doc = new jsPDF.default();
      const timestamp = new Date().toLocaleString();
      
      doc.setFillColor(50, 100, 200);
      doc.rect(14, 10, 30, 10, 'F');
      doc.setTextColor(255, 255, 255);
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(12);
      doc.text('EduAI', 20, 17);
      
      doc.setTextColor(0, 0, 0);
      doc.setFontSize(18);
      doc.text(getReportTitle(), 105, 20, { align: 'center' });
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Student: ${data.studentName || studentName}`, 14, 35);
      doc.text(`School: ${data.schoolName || 'N/A'}`, 14, 42);
      doc.text(`Grade: ${data.grade || 'N/A'}`, 14, 49);
      doc.text(`Term: ${data.term || 'N/A'}`, 14, 56);
      doc.text(`GPA: ${data.gpa || 'N/A'}`, 14, 63);
      doc.text(`Generated on: ${timestamp}`, 14, 70);
      
      doc.setDrawColor(200, 200, 200);
      doc.line(14, 75, 196, 75);
      
      if (reportType === 'report-card' && data.subjects) {
        doc.text('Subject Performance', 14, 85);
        
        const tableData = Object.entries(data.subjects).map(([subject, subjectData]: [string, any]) => [
          subject,
          subjectData.letterGrade || 'N/A',
          subjectData.score ? `${subjectData.score}%` : 'N/A',
          subjectData.comments || 'No comments'
        ]);
        
        autoTable(doc, {
          startY: 90,
          head: [['Subject', 'Grade', 'Score', 'Comments']],
          body: tableData,
          theme: 'striped',
          headStyles: { fillColor: [100, 100, 220] }
        });
      }
      
      const lastTableY = doc.previousAutoTable?.finalY || 120;
      let yPosition = lastTableY + 15;
      
      doc.text('AI Recommendations', 14, yPosition);
      yPosition += 7;
      
      if (data.recommendations && data.recommendations.length > 0) {
        data.recommendations.forEach((recommendation: string, index: number) => {
          doc.text(`• ${recommendation}`, 14, yPosition);
          yPosition += 7;
        });
      } else {
        doc.text('• No specific recommendations available', 14, yPosition);
      }
      
      const pageCount = doc.getNumberOfPages();
      doc.setFontSize(10);
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.text('Generated by EduAI - Personalized Education Platform', 105, 287, { align: 'center' });
        doc.text(`Page ${i} of ${pageCount}`, 196, 287, { align: 'right' });
      }
      
      const fileName = `${studentName.replace(/\s+/g, '-')}-${reportType}-${new Date().toISOString().slice(0, 10)}.pdf`;
      doc.save(fileName);
      
      toast({
        title: 'PDF Generated',
        description: `Report saved as ${fileName}`,
        variant: 'default'
      });
    } catch (error) {
      console.error('PDF generation error:', error);
      
      toast({
        title: 'PDF Generation Error',
        description: 'Failed to generate PDF report',
        variant: 'destructive'
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const getReportTitle = () => {
    switch (reportType) {
      case 'essay':
        return 'Essay Feedback Report';
      case 'reading':
        return 'Reading Analysis Report';
      case 'answer':
        return 'Answer Assessment Report';
      case 'report-card':
        return 'Academic Performance Report';
      default:
        return 'Student Report';
    }
  };

  return (
    <Button 
      onClick={generatePdf} 
      className="w-full" 
      variant="outline"
      disabled={isGenerating || !isJsPdfReady}
    >
      <FileText className="h-4 w-4 mr-2" />
      {isGenerating ? 'Generating PDF...' : `Download ${getReportTitle()} as PDF`}
    </Button>
  );
};

export default PdfReportGenerator;
